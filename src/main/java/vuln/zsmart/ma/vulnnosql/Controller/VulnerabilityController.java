package vuln.zsmart.ma.vulnnosql.Controller;

import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import vuln.zsmart.ma.vulnnosql.Beans.*;
import vuln.zsmart.ma.vulnnosql.Services.MyUserDetailServices;
import vuln.zsmart.ma.vulnnosql.Services.RoleService;
import vuln.zsmart.ma.vulnnosql.Services.VulnerabilityService;

import java.util.*;

@Controller
public class VulnerabilityController {

    @Autowired
    VulnerabilityService vulnerabilityService;
    @Autowired
    MyUserDetailServices myUserDetailServices;
    @Autowired
    RoleService roleService;

    @PostMapping(value = "/tables.html/AddnewVuln")
    public String addVuln(@AuthenticationPrincipal UserPrincipal userPrincipal, Vulnerbilite v)
    {
        ObjectId id = userPrincipal.getId();
        Optional<User> userOP = myUserDetailServices.getUserById(id);
        User user = userOP.get();
        v.setAuthor(user);
        if(user.getVulnerbilites()==null)
        {
            List<Vulnerbilite> vulns = new ArrayList<>();
            vulns.add(v);
            user.setVulnerbilites(vulns);
        }else
        {
            user.getVulnerbilites().add(v);
        }
        vulnerabilityService.save(v);
        myUserDetailServices.save(user);

        return "redirect:/tables.html";
    }


    @GetMapping("/tables.html/vulnerability/edit/{title}")
    public String updateVuln(@AuthenticationPrincipal UserPrincipal userPrincipal,@PathVariable String title, Model model)
    {
        ObjectId id = userPrincipal.getId();
        User user = myUserDetailServices.getUserById(id).get();
        Vulnerbilite vulnerbilite = vulnerabilityService.getVulnByTitle(title);
        Photo photo = user.getPhoto();
        if(photo!=null)
        {
            model.addAttribute("image", Base64.getEncoder().encodeToString(photo.getImage().getData()));
        }
        if(!Objects.equals(user.getUsername(), vulnerbilite.getAuthor().getUsername()))
        {
            return "redirect:/accessDenied.html";
        }else
        {
            model.addAttribute("vulnEDIT",vulnerbilite);
            return "vulnEdit";
        }
    }

    @RequestMapping("/tables.html/update/vuln")
    public String tableUpdate(@AuthenticationPrincipal UserPrincipal userPrincipal,Vulnerbilite vulnerbilite)
    {
        ObjectId id= userPrincipal.getId();
        User user = myUserDetailServices.getUserById(id).get();
        Optional<Vulnerbilite> test = vulnerabilityService.findVulnById(vulnerbilite.getId());
        if(test.isPresent())
        {
            Vulnerbilite _vulnerbilite1 = test.get();
            _vulnerbilite1.setAuthor(user);
            _vulnerbilite1.setPlatform(vulnerbilite.getPlatform());
            _vulnerbilite1.setDescription(vulnerbilite.getDescription());
            _vulnerbilite1.setVerify(vulnerbilite.getVerify());
            _vulnerbilite1.setDate(vulnerbilite.getDate());
            _vulnerbilite1.setExploit(vulnerbilite.getExploit());

            vulnerabilityService.save(_vulnerbilite1);

            return "redirect:/tables.html/vulnerability/edit/"+_vulnerbilite1.getTitle();
        }
        else
        {
            return "tables";
        }
    }
    @GetMapping("/tables.html/view/user/{username}")
    public String viewtUserVuln(@PathVariable String username, Model model){
        User user = myUserDetailServices.findUserByUsername(username);
        model.addAttribute("authorResume", user);
        model.addAttribute("userRoles", roleService.getUserRoles(user));
        model.addAttribute("vulnerabilities", user.getVulnerbilites());
        return "resume";
    }

}
